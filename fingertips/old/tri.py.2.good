import cv2
import time

# Define some constants for drawing circles on the image
GREEN = (0, 255, 0)  # The color of the circles (in BGR format)
THUMB_RADIUS = 30  # The radius of the thumb circle
OTHER_RADIUS = 15  # The radius of the index/middle finger circles

# Initialize the video capture device (use 0 for the default camera)
cap = cv2.VideoCapture(0)

# Define a function to draw a circle on an image
def draw_circle(img, center, radius, color):
    cv2.circle(img, center, radius, color, -1)

# Define a function to detect the tip of a finger in an image
# Define a function to detect the tip of a finger in an image
def detect_finger_tip(img, threshold):
    # Convert the image to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Apply a Gaussian blur to reduce noise
    blurred = cv2.GaussianBlur(gray, (7, 7), 0)

    # Apply thresholding to create a binary image
    _, thresh = cv2.threshold(blurred, threshold, 255, cv2.THRESH_BINARY)

    # Find contours in the binary image
    contours, _ = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    if len(contours) > 0:
        # Find the contour with the largest area (assumes that the finger is the largest contour)
        largest_contour = max(contours, key=cv2.contourArea)

        # Find the tip of the finger by finding the point in the contour with the smallest y-coordinate
        tip = tuple(largest_contour[largest_contour[:,:,1].argmin()][0])
    else:
        # If no contours were found, return a point at the center of the image
        tip = (img.shape[1] // 2, img.shape[0] // 2)

    return tip

try:
    while True:
        # Capture a frame from the video device
        ret, frame = cap.read()

        # Detect the tips of the thumb, index finger, and middle finger
        thumb_tip = detect_finger_tip(frame, 150)
        index_tip = detect_finger_tip(frame, 100)
        middle_tip = detect_finger_tip(frame, 120)

        # Draw circles on the image to represent the finger tips
        draw_circle(frame, thumb_tip, THUMB_RADIUS, GREEN)
        draw_circle(frame, index_tip, OTHER_RADIUS, GREEN)
        draw_circle(frame, middle_tip, OTHER_RADIUS, GREEN)

        # Display the resulting image
        cv2.imshow('image', frame)

        # Wait for a short amount of time before repeating
        time.sleep(0.01)

        # Check for a key press (allows the user to quit the program by pressing the 'q' key)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

except KeyboardInterrupt:
    # Clean up the video capture device and close the display window
    cap.release()
    cv2.destroyAllWindows()

