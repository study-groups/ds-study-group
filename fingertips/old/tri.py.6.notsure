import cv2
import time
import pygame
import numpy as np
import math

# Define some constants for drawing circles on the image
GREEN = (0, 255, 0)  # The color of the circles (in BGR format)
THUMB_RADIUS = 30  # The radius of the thumb circle
OTHER_RADIUS = 15  # The radius of the index/middle finger circles

# Define some constants for audio generation
SAMPLE_RATE = 48000  # The sample rate of the audio signal
DURATION = 0.1  # The duration of each audio buffer (in seconds)
FREQUENCY = 220  # The frequency of the audio tone (in Hz)
VOLUME = 0.1  # The starting volume (as a fraction of max)
MAX_VOLUME = 1.0  # The maximum volume (as a fraction of max)
MIN_VOLUME = 0.001  # The minimum volume (as a fraction of max)
VOLUME_STEP = 0.5  # The amount to increase/decrease the volume by when a button is pressed

# Initialize the video capture device (use 0 for the default camera)
cap = cv2.VideoCapture(0)

# Initialize Pygame and the game controller
pygame.init()
pygame.joystick.init()
joystick = pygame.joystick.Joystick(0)
joystick.init()

# Initialize the sound mixer and the audio buffer
pygame.mixer.init(frequency=SAMPLE_RATE, channels=2)  # Set channels=2 for stereo sound


#buffer_size = int(DURATION * SAMPLE_RATE)
#buffer = (np.sin(2 * np.pi * np.arange(buffer_size) * FREQUENCY / SAMPLE_RATE)).astype(np.float32)
#buffer = buffer.reshape((-1, 1))
#buffer = np.repeat(buffer, 2, axis=1)  # Duplicate the mono channel to create two identical channels
# Create a sound object from the buffer
#sound = pygame.sndarray.make_sound(buffer)




# Define the sine wave parameters
#amplitude = 0.1  # Set the amplitude of the sine wave
#frequency = 220  # Set the frequency of the sine wave

# Define a callback function to generate the sine wave samples
#def audio_callback(in_data, frame_count, time_info, status):
#    t = np.linspace(0, frame_count/SAMPLE_RATE, frame_count, endpoint=False)
#    samples = amplitude * np.sin(2 * np.pi * frequency * t)
#    return (samples, pygame.sndarray.samples_to_array(samples))
#
# Create an audio stream with the callback function
#stream = pygame.mixer.AudioStream(channels=1, buffer_size=1024, callback=audio_callback)

# Set the sample rate and buffer size
SAMPLE_RATE = 48000
BUFFER_SIZE = 1024

# Define the sine wave parameters
amplitude = 0.1  # Set the amplitude of the sine wave
frequency = 220  # Set the frequency of the sine wave

# Define a generator function to generate the sine wave samples
def sine_wave_generator():
    while True:
        t = np.linspace(0, BUFFER_SIZE / SAMPLE_RATE, BUFFER_SIZE, endpoint=False)
        samples = amplitude * np.sin(2 * np.pi * frequency * t)
        yield from samples.astype(np.float32)

# Initialize Pygame and the sound mixer
pygame.init()
pygame.mixer.init(frequency=SAMPLE_RATE)

# Create a sound object with the generator function
samples = np.fromiter(sine_wave_generator(), dtype=np.float32)
sound = pygame.sndarray.make_sound(samples)

# Play the sound object continuously
sound.play(loops=-1)





# Define a function to draw a circle on an image
def draw_circle(img, center, radius, color):
    cv2.circle(img, center, radius, color, -1)

# Define a function to detect the tip of a finger in an image
def detect_finger_tip(img, threshold):
    # Convert the image to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Apply a Gaussian blur to reduce noise
    blurred = cv2.GaussianBlur(gray, (7, 7), 0)

    # Apply thresholding to create a binary image
    _, thresh = cv2.threshold(blurred, threshold, 255, cv2.THRESH_BINARY)

    # Find contours in the binary image
    contours, _ = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    if len(contours) > 0:
        # Find the contour with the largest area (assumes that the finger is the largest contour)
        largest_contour = max(contours, key=cv2.contourArea)

        # Find the tip of the finger by finding the point in the contour with the smallest y-coordinate
        tip = tuple(largest_contour[largest_contour[:,:,1].argmin()][0])
    else:
        # If no contours were found, return a point at the center of the image
        tip = (img.shape[1] // 2, img.shape[0] // 2)

    return tip



# Define a function to update the volume based on the gamepad input
def update_volume():
    global VOLUME

    # Check if the volume up button is pressed to increase volume by 0.5 dB
    if joystick.get_button(3):
        VOLUME = min(VOLUME * 2 ** (0.5/20), MAX_VOLUME)

    # Check if the volume down button is pressed to decrease volume by 0.5 dB
    if joystick.get_button(2):
        VOLUME = max(VOLUME * 2 ** (-0.5/20), MIN_VOLUME)


# Run the event loop to keep the sound playing
#running = True
#while running:
#    for event in pygame.event.get():
#        if event.type == pygame.QUIT:
#            running = False
#pygame.quit()




# Start the video capture loop
while True:
    # Check for gamepad events and print them to the console
    for event in pygame.event.get():
        if event.type == pygame.JOYAXISMOTION:
            print(f"Joystick axis motion: axis={event.axis}, value={event.value}")
        elif event.type == pygame.JOYBUTTONDOWN:
            print(f"Joystick button down: button={event.button}")
        elif event.type == pygame.JOYBUTTONUP:
            print(f"Joystick button up: button={event.button}")

    # Capture a frame from the video device
    _, frame = cap.read()

    # Flip the frame horizontally (mirror effect)
    frame = cv2.flip(frame, 1)

    # Detect the tips of the fingers
    thumb_tip = detect_finger_tip(frame, 150)
    index_tip = detect_finger_tip(frame, 50)
    middle_tip = detect_finger_tip(frame, 70)

    # Draw circles on the frame
    draw_circle(frame, thumb_tip, THUMB_RADIUS * 2, GREEN)
    draw_circle(frame, index_tip, OTHER_RADIUS, GREEN)
    draw_circle(frame, middle_tip, OTHER_RADIUS, GREEN)

    # Update the volume based on the gamepad input
    update_volume()

    # Set the volume of the sound object and play it
    sound.set_volume(VOLUME * 0.1778)  # Convert volume from 0-1 to -25 dBFS (approx.)
    sound.play()

    # Display the frame
    cv2.imshow('Frame', frame)

    # Check if the 'q' key was pressed to quit the loop
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Clean up the video capture and Pygame objects
cap.release()
pygame.quit()

