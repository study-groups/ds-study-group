/Users/mricos/src/ds-study-group/chats/eeg
├── _directory_tree.txt
├── fetchSummary.js
├── graph.py
├── graph.sh
├── graph.svg
├── graph_with_links.py
├── index.html
├── llm.py
├── render.svg -> graph_with_links.svg
├── render_with_links.svg
├── style.css
└── wikiLinks.js

1 directory, 12 files
+-- _directory_tree.txt
## _directory_tree.txt ##
/Users/mricos/src/ds-study-group/chats/eeg
├── _directory_tree.txt
├── fetchSummary.js
├── graph.py
├── graph.sh
├── graph.svg
├── graph_with_links.py
├── index.html
├── llm.py
├── render.svg -> graph_with_links.svg
├── render_with_links.svg
├── style.css
└── wikiLinks.js

1 directory, 12 files


+-- directory_structure_and_files.txt
## directory_structure_and_files.txt ##


+-- fetchSummary.js
## fetchSummary.js ##
document.addEventListener('DOMContentLoaded', function() {
    const svgObject = document.getElementById('svgObject');
    svgObject.addEventListener('load', function() {
        const svgDoc = svgObject.contentDocument;
        Object.keys(wikiLinks).forEach(function(key) {
            const element = svgDoc.getElementById(key);
            if (element) {
                element.addEventListener('mouseenter', function(event) {
                    fetchSummary(wikiLinks[key], event);
                });
            }
        });
    });
});

async function fetchSummary(title, event) {
    const url = `https://en.wikipedia.org/api/rest_v1/page/summary/${title}`;
    const popup = document.getElementById('popup');

    try {
        const response = await fetch(url);
        const data = await response.json();

        if (data.extract) {
            popup.innerHTML = data.extract;
            popup.style.display = 'block';
            popup.style.left = `${event.pageX + 20}px`;
            popup.style.top = `${event.pageY}px`;
        }
    } catch (error) {
        console.error('Error fetching summary:', error);
    }
}

document.addEventListener('mousemove', function(e) {
    const popup = document.getElementById('popup');
    if (popup.style.display === 'block') {
        popup.style.left = `${e.pageX + 20}px`;
        popup.style.top = `${e.pageY}px`;
    }
});

document.addEventListener('mouseleave', function() {
    const popup = document.getElementById('popup');
    popup.style.display = 'none';
});


+-- graph.py
## graph.py ##
from graphviz import Digraph

dot = Digraph()

dot.node('A', 'EEG Markers of Consciousness in Unresponsive Patients', style='filled', fillcolor='lightblue')
dot.node('B', 'Candidate EEG Features', style='filled', fillcolor='lightgrey')
dot.node('C', 'Spectral Power', style='filled', fillcolor='lightgrey')
dot.node('D', 'Spectral and Spatial Gradients', style='filled', fillcolor='lightgrey')
dot.node('E', 'Signal Complexity', style='filled', fillcolor='lightgrey')

dot.node('F', 'Alpha Power\n(Absolute, Relative, Flattened)', style='filled', fillcolor='lightyellow')
dot.node('G', 'Spectral Exponent', style='filled', fillcolor='lightyellow')
dot.node('H', 'Alpha Posterior-Anterior Ratio (PAR)', style='filled', fillcolor='lightyellow')
dot.node('I', 'Lempel-Ziv Complexity\n(Shuffle-normalized, Phase-normalized)', style='filled', fillcolor='lightyellow')

dot.node('J', 'Etiology-Specific Markers', style='filled', fillcolor='lightgreen')
dot.node('K', 'Diagnostic and Prognostic Value', style='filled', fillcolor='lightgreen')
dot.node('L', 'Etiology-Dependent Differences', style='filled', fillcolor='lightgreen')
dot.node('M', 'Alpha Power Importance in Anoxic Patients', style='filled', fillcolor='lightgreen')
dot.node('N', 'Spectral Exponent Value for Non-anoxic Patients', style='filled', fillcolor='lightgreen')
dot.node('O', 'Lack of Generalization to Other Etiologies', style='filled', fillcolor='lightgreen')

dot.edges(['AB', 'BC', 'BD', 'BE', 'CF', 'DG', 'DH', 'EI', 'BJ', 'JK', 'JL', 'KM', 'KN', 'KO'])
dot.graph_attr['rankdir'] = 'TB'

# Add legend
dot.node('L1', '**EEG**: Electroencephalogram; a test used to evaluate the electrical activity in the brain.', shape='plaintext')
dot.node('L2', '**Anoxic**: Relating to or marked by a lack of oxygen.', shape='plaintext')
dot.node('L3', '**Spectral Power**: The square of the amplitude of the EEG signal for specific frequency bands.', shape='plaintext')
dot.node('L4', '**Spectral Exponent**: A parameter describing the decay of power spectral density with frequency.', shape='plaintext')
dot.node('L5', '**Posterior-Anterior Ratio (PAR)**: A measure comparing the power of EEG signals from the back to the front of the brain.', shape='plaintext')
dot.node('L6', '**Lempel-Ziv Complexity**: A measure of the complexity or randomness of a signal.', shape='plaintext')
dot.node('L7', '**Shuffle-normalized**: Normalization technique involving random shuffling of a data series.', shape='plaintext')
dot.node('L8', '**Phase-normalized**: Normalization technique based on randomizing the phase of a signal while preserving its amplitude spectrum.', shape='plaintext')


# Save the output to an SVG file with legends
output_path_with_legend = "./render.svg"
dot.render(output_path_with_legend, format="svg", cleanup=True)
# Output the dot source and render the SVG


+-- graph.sh
/Users/mricos/src/ds-study-group/chats/eeg/graph.sh
+-- graph.svg
/Users/mricos/src/ds-study-group/chats/eeg/graph.svg
+-- graph_with_links.py
## graph_with_links.py ##
from graphviz import Digraph

dot = Digraph()

# Define URLs for each topic
urls = {
    'A': "https://en.wikipedia.org/wiki/Electroencephalography",
    'C': "https://en.wikipedia.org/wiki/Spectral_power_distribution",
    'D': "https://en.wikipedia.org/wiki/Spectral_density#Spectral_power_density",
    'E': "https://en.wikipedia.org/wiki/Complex_system",
    'F': "https://en.wikipedia.org/wiki/Alpha_wave",
    'G': "https://en.wikipedia.org/wiki/1/f_noise",
    'H': "https://en.wikipedia.org/wiki/Electroencephalography#Alpha_wave",
    'I': "https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv_complexity",
    'J': "https://en.wikipedia.org/wiki/Pathology",
    'K': "https://en.wikipedia.org/wiki/Diagnosis",
    'L': "https://en.wikipedia.org/wiki/Etiology",
    'M': "https://en.wikipedia.org/wiki/Hypoxia_(medical)",
    'N': "https://en.wikipedia.org/wiki/Brain_injury",
    'O': "https://en.wikipedia.org/wiki/Generalization"
}

# Adding nodes with URLs
dot.node('A', 'EEG Markers of Consciousness in Unresponsive Patients', style='filled', fillcolor='lightblue', URL=urls['A'])
dot.node('B', 'Candidate EEG Features', style='filled', fillcolor='lightgrey')
dot.node('C', 'Spectral Power', style='filled', fillcolor='lightgrey', URL=urls['C'])
dot.node('D', 'Spectral and Spatial Gradients', style='filled', fillcolor='lightgrey', URL=urls['D'])
dot.node('E', 'Signal Complexity', style='filled', fillcolor='lightgrey', URL=urls['E'])

dot.node('F', 'Alpha Power\n(Absolute, Relative, Flattened)', style='filled', fillcolor='lightyellow', URL=urls['F'])
dot.node('G', 'Spectral Exponent', style='filled', fillcolor='lightyellow', URL=urls['G'])
dot.node('H', 'Alpha Posterior-Anterior Ratio (PAR)', style='filled', fillcolor='lightyellow', URL=urls['H'])
dot.node('I', 'Lempel-Ziv Complexity\n(Shuffle-normalized, Phase-normalized)', style='filled', fillcolor='lightyellow', URL=urls['I'])

dot.node('J', 'Etiology-Specific Markers', style='filled', fillcolor='lightgreen', URL=urls['J'])
dot.node('K', 'Diagnostic and Prognostic Value', style='filled', fillcolor='lightgreen', URL=urls['K'])
dot.node('L', 'Etiology-Dependent Differences', style='filled', fillcolor='lightgreen', URL=urls['L'])
dot.node('M', 'Alpha Power Importance in Anoxic Patients', style='filled', fillcolor='lightgreen', URL=urls['M'])
dot.node('N', 'Spectral Exponent Value for Non-anoxic Patients', style='filled', fillcolor='lightgreen', URL=urls['N'])
dot.node('O', 'Lack of Generalization to Other Etiologies', style='filled', fillcolor='lightgreen', URL=urls['O'])

dot.edges(['AB', 'BC', 'BD', 'BE', 'CF', 'DG', 'DH', 'EI', 'BJ', 'JK', 'JL', 'KM', 'KN', 'KO'])

# Since legend nodes don't directly relate to a single URL, they're not linked
# To add helpful annotations, consider doing so in the HTML or documentation accompanying the SVG

import json
with open('wikiLinks.js', 'w') as f:
    f.write('const wikiLinks = ')
    json.dump(urls, f, indent=4)

# ... existing code ...

output_path_with_legend = "render_with_links"
dot.render(output_path_with_legend, format="svg", cleanup=True)


+-- index.html
## index.html ##
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>EEG Markers of Consciousness in Unresponsive Patients</title>
    <link rel="stylesheet" href="style.css">
    <script defer src="wikiLinks.js"></script>
</head>
<h1>EEG Markers of Consciousness in Unresponsive Patients</h1>
<p>This paper explores the diagnostic and prognostic value of EEG markers in assessing consciousness in unresponsive patients, emphasizing the significance of etiology-specific analysis and revealing the varied impact of EEG features across different patient groups.</p>
<div class="container">

    <h1>EEG Markers of Consciousness in Unresponsive Patients</h1>
    <object type="image/svg+xml" data="render_with_links.svg" id="svgObject"></object>
    <div id="popup" class="popup" style="display: none;"></div>

    <!-- <img src="render.svg" alt="Flowchart of EEG Markers of Consciousness"> -->
    <div class="glossary">
        <h2>Glossary</h2>
        <table class="glossary-table">
            <tr>
                <th>Term</th>
                <th>Definition</th>
            </tr>
            <tr>
                <td><strong>EEG</strong></td>
                <td>Electroencephalogram; a test used to evaluate the electrical activity in the brain.</td>
            </tr>
            <tr>
                <td><strong>Anoxic</strong></td>
                <td>Relating to or marked by a lack of oxygen.</td>
            </tr>
            <tr>
                <td><strong>Etiology</strong></td>
                <td>The cause or origin of a disease or condition.</td>
            </tr>
            <tr>
                <td><strong>Spectral Power</strong></td>
                <td>The square of the amplitude of the EEG signal for specific frequency bands.</td>
            </tr>
            <tr>
                <td><strong>Spectral Exponent</strong></td>
                <td>A parameter describing the decay of power spectral density with frequency.</td>
            </tr>
            <tr>
                <td><strong>PAR (Posterior-Anterior Ratio)</strong></td>
                <td>Compares power of EEG signals from the back to the front of the brain.</td>
            </tr>
            <tr>
                <td><strong>Lempel-Ziv Complexity</strong></td>
                <td>A measure of the complexity or randomness of a signal.</td>
            </tr>
            <tr>
                <td><strong>Shuffle-normalized</strong></td>
                <td>Normalization technique involving random shuffling of a data series.</td>
            </tr>
            <tr>
                <td><strong>Phase-normalized</strong></td>
                <td>Normalization technique based on randomizing the phase of a signal while preserving its amplitude spectrum.</td>
            </tr>
        </table>
    </div>
</div>
<script defer src="fetchSummary.js"></script>

</body>
</html>


+-- llm.py
## llm.py ##
import os
import subprocess

# Define the types of files to process differently
code_files = ('.py', '.js', '.html', '.css', '.txt', '.csv')
data_files = ()

def list_directory(directory):
    """
    Uses ls to list the directory contents, including hidden files.
    This function is Unix/Linux/MacOS specific.
    """
    cmd = ['ls', '-1a', directory]
    result = subprocess.run(cmd, stdout=subprocess.PIPE, text=True)
    return result.stdout.splitlines()

def process_file(file_path, output_file):
    """Process each file based on its extension."""
    _, ext = os.path.splitext(file_path)
    try:
        if ext in code_files or ext in data_files:
            # For code and data files, include the content
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
                content = file.read()
                header = f"## {os.path.basename(file_path)} ##\n" if ext in code_files else ""
                output_file.write(f"{header}{content}\n\n")
        else:
            # For other files, just list the file name and location
            output_file.write(f"{file_path}\n")
    except Exception as e:
        # Handle potential errors in reading files, e.g., permission issues
        output_file.write(f"Error processing file {file_path}: {e}\n")

def build_tree(directory, output_file, prefix=''):
    """
    Recursively builds a visual tree of the directory structure, lists contents,
    and processes files based on their type.
    """
    entries = list_directory(directory)
    for entry in entries:
        if entry in ['.', '..']:
            continue  # Skip the current and parent directory markers
        path = os.path.join(directory, entry)
        if os.path.isdir(path):
            # Directory: write its name and explore it recursively
            output_file.write(f"{prefix}+-- {entry}/\n")
            build_tree(path, output_file, prefix=prefix + "    ")
        else:
            # File: process it based on its type
            output_file.write(f"{prefix}+-- {entry}\n")
            process_file(path, output_file)

def main():
    tree_output_filename = "_directory_tree.txt"
    final_output_filename = "directory_structure_and_files.txt"
    current_directory = os.getcwd()

    # Run the tree command and output the result to a temporary file
    with open(tree_output_filename, "w") as tree_output_file:
        subprocess.run(["tree", "-a", current_directory], stdout=tree_output_file, text=True)

    # Now, build the directory structure and files content
    with open(final_output_filename, "w") as final_output_file:
        # First, write the tree command output
        with open(tree_output_filename, "r") as tree_output_file:
            final_output_file.write(tree_output_file.read())

        # Then, append the detailed directory structure and files content
        build_tree(current_directory, final_output_file)

    # Cleanup the temporary tree output file if needed
    os.remove(tree_output_filename)

    print(f"Combined directory tree and structure with files have been written to {final_output_filename}")

if __name__ == "__main__":
    main()

+-- render.svg
/Users/mricos/src/ds-study-group/chats/eeg/render.svg
+-- render_with_links.svg
/Users/mricos/src/ds-study-group/chats/eeg/render_with_links.svg
+-- style.css
## style.css ##
.popup {
    position: absolute;
    background-color: #fff;
    border: 1px solid #ddd;
    padding: 10px;
    width: 300px;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    z-index: 1000;
    display: none;
}
body { font-family: Arial, sans-serif; margin: 20px; }
.container { display: flex; flex-direction: column; }
img { width: 100%; height: auto; max-width: 100%; }
.glossary { margin-top: 20px; }
.glossary-table { border-collapse: collapse; width: 100%; }
.glossary-table th, .glossary-table td { border: 1px solid #ddd; text-align: left; padding: 8px; }
.glossary-table th { background-color: #f2f2f2; }

+-- wikiLinks.js
## wikiLinks.js ##
const wikiLinks = {
    "A": "https://en.wikipedia.org/wiki/Electroencephalography",
    "C": "https://en.wikipedia.org/wiki/Spectral_power_distribution",
    "D": "https://en.wikipedia.org/wiki/Spectral_density#Spectral_power_density",
    "E": "https://en.wikipedia.org/wiki/Complex_system",
    "F": "https://en.wikipedia.org/wiki/Alpha_wave",
    "G": "https://en.wikipedia.org/wiki/1/f_noise",
    "H": "https://en.wikipedia.org/wiki/Electroencephalography#Alpha_wave",
    "I": "https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv_complexity",
    "J": "https://en.wikipedia.org/wiki/Pathology",
    "K": "https://en.wikipedia.org/wiki/Diagnosis",
    "L": "https://en.wikipedia.org/wiki/Etiology",
    "M": "https://en.wikipedia.org/wiki/Hypoxia_(medical)",
    "N": "https://en.wikipedia.org/wiki/Brain_injury",
    "O": "https://en.wikipedia.org/wiki/Generalization"
}

